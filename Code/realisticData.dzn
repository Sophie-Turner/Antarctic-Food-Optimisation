ingredients = {null, 
               noodlesDried, flour, rice, pasta, chipsFrozen, breadRollsFrozen,
               mushroomsTinned, peppersFrozen, broccoliFrozen, peasFrozen, tomatoesTinned, potatoesFresh, beansTinned, aubergineFresh,  
               cheeseFrozen, creamPowder, butterFrozen, milkPowder, oatMilk, eggsFresh, veganCheeseFrozen,
               pepperoniFrozen, poultryMeatFrozen, fishFrozen, quornFrozen, porkFrozen, beefFrozen, lambFrozen, veganSausagesFrozen,
               oil, soySauce, wine, gravyPowder, onionPowder, spicesDried, herbsDried,
               sugar, darkChocolate, yoghurtFrozen, veganYoghurtFrozen, custardTinned, jellyPowder, fruitMixFrozen,
                applesFresh, grapesFresh, orangesFresh, nuts, biscuits};

notIngredient = null;
nothing = none;

% Costs in pennies per 100g or 100ml of ingredient.
% Frozen or tinned/dry. purchase, transport, storage.
% By sea (SDA from UK) or air (Twin Otter from South America or South Atlantic).
costs = [|0,0,0 | 
          40,9,1 | 10,9,1 | 20,9,1 | 14,9,1 | 17,9,2 | 23,9,2 |
          30,9,1 | 30,9,2 | 10,9,2 | 30,9,2 | 20,9,1 | 10,7,1 | 8,9,1 | 11,7,2 | 
          60,9,2 | 40,9,1 | 70,9,2 | 89,9,1 | 19,9,1 | 36,7,1 | 115,9,2 |
          70,9,2 | 90,9,2 | 70,9,2 | 59,9,2 | 57,9,2 | 40,9,2 | 80,9,2 | 128,9,2 |
          13,9,1 | 100,7,1 | 80,7,1 | 77,9,1 | 160,9,1 | 590,9,1 | 330,9,1 |
          16,9,1 | 135,9,1 | 17,9,2 | 35,9,2 | 25,9,1 | 52,9,1 | 44,9,2 | 
           27,7,1 | 40,7,1 | 30,7,1 | 125,9,1 | 12,9,1 |];

% Assume SDA ship costs Â£20,000 per day to move, takes 20 days and can store 1440 metres cubed of food. ~ 9p per 100g.

% kg of greenhouse gas emissions associated with 10kg of igredient. 
% 10kg because then it can be int, same magnitude as 100g cost for obj fn, and relative measure. 
% production, transport, storage.
%include the transportation from the proudction source.
emissions = [| 0,0,0 |
             18,19,1 | 7,19,1 | 15,19,1 | 18,19,1 | 20,19,2 | 6,19,2 |
             24,19,1 | 10,19,2 | 7,19,2 | 10,19,2 | 5,19,1 | 7,37,1 | 10,19,1 | 10,37,2 |
             97,19,2 | 44,19,1 | 76,19,2 | 14,19,1 | 5,19,1 | 33,37,1 | 22,19,2 |
             60,19,2 | 42,19,2 | 44,19,2 | 40,19,2 | 60,19,2 | 242,19,2 | 258,19,2 | 7,19,2 |
             16,19,1 | 22,37,1 | 12,37,1 | 28,19,1 | 28,19,1 | 28,19,1 | 28,19,1 |
             6,19,1 | 42,19,1 | 97,19,2 | 22,19,2 | 97,19,1 | 8,19,1 | 10,19,2 |
              5,37,1 | 5,37,1 | 5,37,1 | 14,19,1 | 18,19,1 |];

% Grams of packaging per 100g of ingredient.
%packagingWaste = [];

% Amount of nutrients in 100g of ingredient.
% nutrients = {calories, carbohydrate, fat, fibre, protein};
nutrition = [|0,0,0,0,0 | 
              138,25,2,1,5 | 364,76,1,3,10 | 130,28,0,0,3 | 131,25,1,1,5 | 536,53,15,5,7 | 286,57,1,2,11 |
              22,3,0,1,3 | 40,9,0,4,2 | 34,7,0,3,3 | 81,14,0,5,5 | 18,4,0,1,1 | 77,17,0,2,2 | 350,63,1,16,21 | 25,6,0,3,1 |
              402,1,33,0,25 | 196,4,19,0,3 | 717,0,81,0,1 | 44,5,1,0,3 | 57,7,3,1,1 | 155,1,11,0,13 | 270,21,21,0,0 |
              494,0,44,0,23 | 239,0,14,0,27 | 206,0,12,0,22 | 99,2,2,6,14 | 242,0,14,0,27 | 250,0,15,0,26 | 294,0,21,0,25 | 216,10,15,4,11 |
              812,0,95,0,0 | 53,5,1,1,8 | 81,3,0,0,0 | 79,5,6,0,2 | 40,9,0,2,1 | 0,0,0,0,0 | 0,0,0,0,0 |
              400,100,0,0,0 | 548,33,38,13,12 | 105,0,9,0,3 | 66,8,2,1,7 | 96,15,3,0,3 | 296,66,0,0,6 | 37,5,0,0,0 |
               53,12,0,2,0 | 73,17,0,0,0 | 41,8,0,0,0 | 701,3,69,6,15 | 67,2,3,0,0 |];

% storage space limits in square cm.
%storageTypes = {dry, frozen};
%storageLimits = [3000, 1000];
% storage space square cm taken by 100g of ingredients.
%spaceTaken = [|0,0 | 10,0|];

numOptions = 3; % 3 choices of meal will be served at the buffet bar.

meals = {vegChowMein, pepperoniPizza, chickenNoodles, mushroomSoup, kievs, mushroomRisotto, quornLasagne, jacketSpud, marghertia, moussaka, ratatouille, vegSpagBol, potatoCurry, sushi, paella, beanChilli, shepherdsPie, veganSausageCasserole, mushroomOmelette, fishAndChips,
 veganPizza, quornChilli, chickenCurry, veganBangersMash, veganCanneloni, beefBurgers, roastPork, stuffedPeppers, stuffedAubergine, shakshuka};

% Oven and grill cost 10p for 10 mins. Hob and microwave cost 6p for 10 mins. Several 100g portions of food fit in each.
% Most oven energy is for preheating. It doesn't increase linearly with time.
mealCookingCosts = [2, 4, 2, 4, 7, 12, 10, 12, 4, 10, 12, 10, 12, 3, 12, 12, 10, 12, 2, 7, 4, 12, 12, 7, 10, 1, 12, 6, 6, 8]; 

maxIngredients = 5;
mealIngredients = 
     [|noodlesDried, mushroomsTinned, peppersFrozen, broccoliFrozen, soySauce
     |flour, cheeseFrozen, pepperoniFrozen, tomatoesTinned, mushroomsTinned
     |noodlesDried, poultryMeatFrozen, peasFrozen, soySauce, broccoliFrozen
     |mushroomsTinned, creamPowder, potatoesFresh, butterFrozen, herbsDried
     |poultryMeatFrozen, flour, peasFrozen, broccoliFrozen, chipsFrozen
     |rice, oil, wine, mushroomsTinned, tomatoesTinned
     |pasta, tomatoesTinned, cheeseFrozen, quornFrozen, peppersFrozen
     |potatoesFresh, oil, beansTinned, peasFrozen, mushroomsTinned
     |flour, tomatoesTinned, cheeseFrozen, oil, herbsDried
     |beefFrozen, potatoesFresh, tomatoesTinned, aubergineFresh, oil
     |tomatoesTinned, peppersFrozen, oil, aubergineFresh, onionPowder
     |pasta, quornFrozen, tomatoesTinned, herbsDried, cheeseFrozen
     |potatoesFresh, spicesDried, onionPowder, oil, rice
     |rice, fishFrozen, soySauce, herbsDried, spicesDried
     |rice, fishFrozen, wine, tomatoesTinned, onionPowder
     |rice, beansTinned, tomatoesTinned, wine, spicesDried
     |potatoesFresh, lambFrozen, peasFrozen, gravyPowder, onionPowder
     |veganSausagesFrozen, potatoesFresh, onionPowder, herbsDried, aubergineFresh
     |eggsFresh, mushroomsTinned, herbsDried, oil, onionPowder
     |fishFrozen, chipsFrozen, peasFrozen, broccoliFrozen, herbsDried
     |flour, veganCheeseFrozen, tomatoesTinned, mushroomsTinned, peppersFrozen
     |rice, quornFrozen, beansTinned, spicesDried, tomatoesTinned
     |poultryMeatFrozen, rice, potatoesFresh, spicesDried, creamPowder
     |veganSausagesFrozen, potatoesFresh, onionPowder, gravyPowder, peasFrozen
     |pasta, veganCheeseFrozen, herbsDried, onionPowder, tomatoesTinned
     |breadRollsFrozen, beefFrozen, cheeseFrozen, onionPowder, chipsFrozen
     |porkFrozen, herbsDried, potatoesFresh, gravyPowder, peasFrozen
     |peppersFrozen, rice, veganCheeseFrozen, herbsDried, beansTinned
     |aubergineFresh, rice, wine, veganCheeseFrozen, spicesDried
     |tomatoesTinned, eggsFresh, peppersFrozen, spicesDried, cheeseFrozen|];
     
% amount of ingredient in meal x 100g or 100ml.
mealIngredientsAmounts = 
    [|2, 2, 1, 1, 0| 2, 2, 2, 2, 1| 2, 1, 2, 1, 1| 1, 1, 1, 1, 0| 2, 1, 1, 1, 1|
      2, 1, 1, 1, 1| 1, 2, 1, 2, 1| 2, 0, 1, 1, 1| 2, 1, 1, 1, 1| 1, 2, 2, 2, 0|
      2, 2, 1, 2, 1| 2, 2, 2, 1, 1| 3, 1, 1, 1, 2| 2, 2, 1, 1, 1| 3, 2, 1, 2, 1|
      2, 3, 2, 1, 1| 3, 1, 1, 1, 1| 2, 2, 1, 1, 2| 2, 1, 1, 1, 1| 3, 2, 1, 1, 1|
      2, 1, 1, 1, 1| 2, 2, 1, 1, 2| 1, 2, 1, 1, 1| 2, 2, 0, 0, 1| 2, 2, 1, 0, 2|
      1, 1, 1, 0, 1| 2, 1, 1, 0, 1| 2, 1, 1, 1, 1| 2, 1, 1, 1, 0| 2, 1, 2, 1, 1|];     
     
maxContains = 3;     
mealContains = [|gluten, egg, none| meat, milk, gluten| meat, gluten, egg| milk, none, none| meat, gluten, none|
                 none, none, none| gluten, milk, egg| none, none, none| gluten, milk, none| meat, none, none|
                 none, none, none| egg, gluten, milk| none, none, none| meat, none, none| meat, none, none|
                 none, none, none| meat, none, none| none, none, none| egg, none, none| meat, none, none|
                 gluten, none, none| egg, none, none| meat, milk, none| none, none, none| gluten, none, none|
                 gluten, meat, milk| meat, none, none| none, none, none| none, none, none| egg, milk, none|];

% The sides can all be eated by every diet type.
numSidesOffered = 1;              
sides = {roastPotatoes, Rice, veganSausages, peas, chips};                     
% Oven and grill cost 10p for 10 mins. Hob and microwave cost 6p for 10 mins.
sideCookingCosts = [10, 3, 7, 2, 7];          
sideIngredients = [potatoesFresh, rice, veganSausagesFrozen, peasFrozen, chipsFrozen]; 
          
numDessertsOffered = 1;
desserts = {veganMousse, veganFruitYoghurt, fruitSalad, walnutCake, chocolateCake, spongeCustard, jelly, cheeseBiscuits, veganPancakes};
% Oven and grill cost 10p for 10 mins. Hob and microwave cost 6p for 10 mins.
dessertCookingCosts = [0, 0, 0, 13, 13, 13, 0, 0, 1]; 

dessertIngredients = [|darkChocolate, oil, sugar, null, null|
                       veganYoghurtFrozen, fruitMixFrozen, null, null, null|
                       applesFresh, orangesFresh, grapesFresh, null, null|
                       flour, sugar, butterFrozen, eggsFresh, nuts|
                       flour, sugar, butterFrozen, eggsFresh, darkChocolate|
                       flour, sugar, butterFrozen, eggsFresh, custardTinned|
                       jellyPowder, fruitMixFrozen, null, null, null|
                       biscuits, cheeseFrozen, grapesFresh, null, null|
                       oatMilk, flour, oil, sugar, fruitMixFrozen|];
                       
dessertAmounts = [| 1,1,1,0,0 | 3,1,0,0,0 | 1,1,1,0,0 | 1,1,1,1,1 | 1,1,1,1,1 | 1,1,1,1,2 | 1,1,0,0,0 | 2,2,1,0,0 | 1,1,1,1,1 |];          
dessertContains = [| sugars, none, none | none, none, none | none, none, none | nut, egg, sugars |
                     milk, egg, sugars | milk, egg, sugars | sugars, meat, none | milk, none, none | sugars, none, none |];
                    
numPeople = 20; 
% physical workers need +100% more nutrients per day.
numPhysicalWorkers = 10;
% males need +25% more nutrients per day.
numMen = 14; 
% num people who do not eat categories. None means they eat everything.     
% contains = {none, meat, milk, gluten, egg, nut, seed, sugars};
numRefusals = [0, 6, 3, 2, 2, 0, 0, 1];

% Expand num people data to account for people arriving and leaving on different days. 
     
